/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-02-20 01:21:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Test2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>Showing/Hiding overlays</title>\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("  width: 50%;\r\n");
      out.write("  height: 80%;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("}\r\n");
      out.write("#map {\r\n");
      out.write("  height: 100%;\r\n");
      out.write("}\r\n");
      out.write("#floating-panel {\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  top: 10px;\r\n");
      out.write("  left: 25%;\r\n");
      out.write("  z-index: 5;\r\n");
      out.write("  background-color: #fff;\r\n");
      out.write("  padding: 5px;\r\n");
      out.write("  border: 1px solid #999;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  font-family: 'Roboto','sans-serif';\r\n");
      out.write("  line-height: 30px;\r\n");
      out.write("  padding-left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAF05JCFoefu9jROxjM8TcHc8GIR6YDhuU\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("// This example adds hide() and show() methods to a custom overlay's prototype.\r\n");
      out.write("// These methods toggle the visibility of the container <div>.\r\n");
      out.write("// Additionally, we add a toggleDOM() method, which attaches or detaches the\r\n");
      out.write("// overlay to or from the map.\r\n");
      out.write("\r\n");
      out.write("var overlay;\r\n");
      out.write("\r\n");
      out.write("USGSOverlay.prototype = new google.maps.OverlayView();\r\n");
      out.write("\r\n");
      out.write("function initMap() {\r\n");
      out.write("  var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("    zoom: 11,\r\n");
      out.write("    center: {lat: 62.323907, lng: -150.109291},\r\n");
      out.write("    mapTypeId: google.maps.MapTypeId.SATELLITE\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  var bounds = new google.maps.LatLngBounds(\r\n");
      out.write("      new google.maps.LatLng(62.281819, -150.287132),\r\n");
      out.write("      new google.maps.LatLng(62.400471, -150.005608));\r\n");
      out.write("\r\n");
      out.write("  // The photograph is courtesy of the U.S. Geological Survey.\r\n");
      out.write("  var srcImage = 'https://developers.google.com/maps/documentation/javascript/';\r\n");
      out.write("  srcImage += 'examples/full/images/talkeetna.png';\r\n");
      out.write("\r\n");
      out.write("  overlay = new USGSOverlay(bounds, srcImage, map);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/** @constructor */\r\n");
      out.write("function USGSOverlay(bounds, image, map) {\r\n");
      out.write("\r\n");
      out.write("  // Now initialize all properties.\r\n");
      out.write("  this.bounds_ = bounds;\r\n");
      out.write("  this.image_ = image;\r\n");
      out.write("  this.map_ = map;\r\n");
      out.write("\r\n");
      out.write("  // Define a property to hold the image's div. We'll\r\n");
      out.write("  // actually create this div upon receipt of the onAdd()\r\n");
      out.write("  // method so we'll leave it null for now.\r\n");
      out.write("  this.div_ = null;\r\n");
      out.write("\r\n");
      out.write("  // Explicitly call setMap on this overlay\r\n");
      out.write("  this.setMap(map);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * onAdd is called when the map's panes are ready and the overlay has been\r\n");
      out.write(" * added to the map.\r\n");
      out.write(" */\r\n");
      out.write("USGSOverlay.prototype.onAdd = function() {\r\n");
      out.write("\r\n");
      out.write("  var div = document.createElement('div');\r\n");
      out.write("  div.style.border = 'none';\r\n");
      out.write("  div.style.borderWidth = '0px';\r\n");
      out.write("  div.style.position = 'absolute';\r\n");
      out.write("\r\n");
      out.write("  // Create the img element and attach it to the div.\r\n");
      out.write("  var img = document.createElement('img');\r\n");
      out.write("  img.src = this.image_;\r\n");
      out.write("  img.style.width = '100%';\r\n");
      out.write("  img.style.height = '100%';\r\n");
      out.write("  div.appendChild(img);\r\n");
      out.write("\r\n");
      out.write("  this.div_ = div;\r\n");
      out.write("\r\n");
      out.write("  // Add the element to the \"overlayImage\" pane.\r\n");
      out.write("  var panes = this.getPanes();\r\n");
      out.write("  panes.overlayImage.appendChild(this.div_);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("USGSOverlay.prototype.draw = function() {\r\n");
      out.write("\r\n");
      out.write("  // We use the south-west and north-east\r\n");
      out.write("  // coordinates of the overlay to peg it to the correct position and size.\r\n");
      out.write("  // To do this, we need to retrieve the projection from the overlay.\r\n");
      out.write("  var overlayProjection = this.getProjection();\r\n");
      out.write("\r\n");
      out.write("  // Retrieve the south-west and north-east coordinates of this overlay\r\n");
      out.write("  // in LatLngs and convert them to pixel coordinates.\r\n");
      out.write("  // We'll use these coordinates to resize the div.\r\n");
      out.write("  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\r\n");
      out.write("  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\r\n");
      out.write("\r\n");
      out.write("  // Resize the image's div to fit the indicated dimensions.\r\n");
      out.write("  var div = this.div_;\r\n");
      out.write("  div.style.left = sw.x + 'px';\r\n");
      out.write("  div.style.top = ne.y + 'px';\r\n");
      out.write("  div.style.width = (ne.x - sw.x) + 'px';\r\n");
      out.write("  div.style.height = (sw.y - ne.y) + 'px';\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("USGSOverlay.prototype.onRemove = function() {\r\n");
      out.write("  this.div_.parentNode.removeChild(this.div_);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("// [START region_hideshow]\r\n");
      out.write("// Set the visibility to 'hidden' or 'visible'.\r\n");
      out.write("USGSOverlay.prototype.hide = function() {\r\n");
      out.write("  if (this.div_) {\r\n");
      out.write("    // The visibility property must be a string enclosed in quotes.\r\n");
      out.write("    this.div_.style.visibility = 'hidden';\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("USGSOverlay.prototype.show = function() {\r\n");
      out.write("  if (this.div_) {\r\n");
      out.write("    this.div_.style.visibility = 'visible';\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("USGSOverlay.prototype.toggle = function() {\r\n");
      out.write("  if (this.div_) {\r\n");
      out.write("    if (this.div_.style.visibility === 'hidden') {\r\n");
      out.write("      this.show();\r\n");
      out.write("    } else {\r\n");
      out.write("      this.hide();\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("// Detach the map from the DOM via toggleDOM().\r\n");
      out.write("// Note that if we later reattach the map, it will be visible again,\r\n");
      out.write("// because the containing <div> is recreated in the overlay's onAdd() method.\r\n");
      out.write("USGSOverlay.prototype.toggleDOM = function() {\r\n");
      out.write("  if (this.getMap()) {\r\n");
      out.write("    // Note: setMap(null) calls OverlayView.onRemove()\r\n");
      out.write("    this.setMap(null);\r\n");
      out.write("  } else {\r\n");
      out.write("    this.setMap(this.map_);\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("// [END region_hideshow]\r\n");
      out.write("\r\n");
      out.write("google.maps.event.addDomListener(window, 'load', initMap);\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("\r\n");
      out.write("<!-- [START region_toolbar] -->\r\n");
      out.write("<!-- Add an input button to initiate the toggle method on the overlay. -->\r\n");
      out.write("    <div id=\"floating-panel\">\r\n");
      out.write("      <input type=\"button\" value=\"Toggle visibility\" onclick=\"overlay.toggle();\"></input>\r\n");
      out.write("      <input type=\"button\" value=\"Toggle DOM attachment\" onclick=\"overlay.toggleDOM();\"></input>\r\n");
      out.write("    </div>\r\n");
      out.write("<!-- [END region_toolbar] -->\r\n");
      out.write("    <div id=\"map\"></div>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
